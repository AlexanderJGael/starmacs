#+TITLE: Axiom -- An Emacs Config With as Little as Possible
#+AUTHOR: Matthew Cooper Healy
#+EMAIL: m.cooper.healy@gmail.com
#+STARTUP: overview


#+CAPTION: A hackable text-editor for the 21st century!
[[./img/emacs.png]]


* What is Axiom?
Axiom is yet another set of defaults for emacs, with one (and only one) purpose:
it attempts to get out of your way, and add as little magic as possible.

Axiom is not a full distribution, like Doom or Spacemacs,
but is more akin to Prelude, although much more amateur.

** Design Decisions
*** One Big File
Axiom's config lives in a single file: =README.org=.
This is entirely in an effort to make things easier to grok for new users.
This way, there is only one file to be perused, and users need not be bothered to learn how packages work.

The use of an org file rather than an elisp file is to improve discoverability.
Users can simply expand and collapse sections to painlessly explore the configuration.

** Included Packages
Axiom intends to be a set of sane defaults for emacs, and nothing more.
As such, dependency on packages is minimized as much as is practical.

Ideally, Axiom is mostly an aesthetic overhaul,
with the only major functional changes being the inclusion of magit and eglot.

This is intended to allow a new emacs user to learn emacs (and not a custom layer sitting on it)
without sacrificing the kinds of features present in their old editor.
LSP is only becoming more relevant, and magit is the only thing close to the kind of git-integration
that is becoming expected in the modern world of editors.

** Extras
Settings for some languages have been pre-configured (primarily Go and Julia) this is unabashedly because they are languages I use often, and Axiom is developed primarily for my own use.

** Things You May Prefer
Axiom is not necessarily for everyone; you may prefer one of the following:

[[https://spacemacs.org][Spacemacs]]
[[https://github.com/hlissner/doom-emacs][Doom Emacs]]
[[https://github.com/bbatsov/prelude][Prelude]]

* Package Management
** Package Repositories
We assume that we will want packages from MELPA, the most popular emacs package registry, as well as ELPA, the official GNU repository, and MELPA Stable (which is exactly what it sounds like).
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 0)))

  (add-to-list 'load-path "~/.emacs.d/modules") ; add local files
#+end_src

** =straight.el=
*** Bootstrap =straight=
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
    #+end_src

*** Integrate with =use-package=
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

* Quality of Life Improvements
** Keep Buffers Up to Date with Files
When files on disk change, open buffers should be automatically updated to reflect those changes.
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** Do Not Create Extra Files
Don't create =backup~= or =#autosave#= files
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

** Add path to extra binaries
#+begin_src emacs-lisp
(use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Replace Selection
When text is highlighted, typing should delete the highlighted text and insert what is typed.
#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

** Usage Guides
=discover.el= mostly just helps with =dired= mode, but it's worth including for new users.
#+begin_src emacs-lisp
  (use-package discover
    :ensure t
    :config
    (global-discover-mode 1))
#+end_src

** Mouse in Terminal
#+begin_src emacs-lisp
  (xterm-mouse-mode 1)
#+end_src

** Whitespace
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (setq-default tab-width 4)
  (setq whitespace-style (quote (face tabs newline tab-mark newline-mark)))

  (setq whitespace-display-mappings
        '((newline-mark 10 [172 10])
          (tab-mark 9 [187 9] [92 9])))
  (global-whitespace-mode 't)

  (custom-set-faces
   '(whitespace-tab((t (:foreground "#525252"))))
   '(whitespace-newline((t (:foreground "#525252")))))

#+end_src

** Column Ruler
I like to display a column ruler at common styleguide limits
(famously, 80 characters, but also often 100 and 120 characters).
#+begin_src emacs-lisp
  ;; (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

** Look
** Mini-Frame
=mini-frame= is a package that moves the minibuffer to the center-top
of the buffer, much like the command pallette of Atom or Visual Studio Code.
Since this is a more eye-catching location, it decreases the likelihood that,
for example, a search will be initiated, then edits made in the main buffer,
without ever exiting the search. This can cause very jarring jumps back and
forth through the buffer when finally rectified, so it is better to know when
one is making the error, when one can solve it with a single keystroke.
#+begin_src emacs-lisp
  (use-package mini-frame
    :hook
    (prog-mode . mini-frame-mode)
    :config
    (custom-set-variables
     '(mini-frame-show-parameters
       '((top . 10)
         (width . 0.5)
         (left . 0.5)))))
#+end_src

*** Theme
#+begin_src emacs-lisp
  (defvar axiom/current-theme 'dark)

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (if (window-system)
        (load-theme 'doom-one t))) ; Only load in GUI to reduce issues with comment-coloring
#+end_src

*** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src

*** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :custom (doom-modeline-height 40))
#+end_src

*** Quality of Life
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  ;(menu-bar-mode -1)          ; Disable the menu bar

  (toggle-frame-maximized)    ; Always start maximized

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Scrolling
Set up pixel-scrolling for a nice, modern-feeling experience (currently causing lag on long files)
#+begin_src emacs-lisp
  (pixel-scroll-precision-mode 1)
#+end_src

*** Cursor
#+begin_src emacs-lisp
  (setq-default cursor-type '(bar . 1))
#+end_src

*** Truncate, Don't Wrap
#+begin_src emacs-lisp
  (set-default 'truncate-lines t)
  (define-fringe-bitmap 'right-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
  (define-fringe-bitmap 'left-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
#+end_src

*** Focus Line
#+begin_src emacs-lisp
  (if (window-system)
      (global-hl-line-mode 1))
#+end_src

*** Highlight TODOs
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :config
    (global-hl-todo-mode 1))
#+end_src

*** Dashboard
#+begin_src emacs-lisp
   (defun no-linum ()
     (display-line-numbers-mode -1))

  (defun axiom/dashboard ()
     "Show minimal *welcome* buffer"
     (with-current-buffer (get-buffer-create "*Welcome*")
       (setq truncate-lines t)
       (no-linum)
       (let* ((buffer-read-only)
              (image-path "~/.emacs.d/img/emacs.png")
              (image (create-image image-path))
              (size (image-size image))
              (height (cdr size))
              (width (car size))
              (top-margin (floor (/ (- (window-height) height) 2)))
              (left-margin (floor (/ (- (window-width) width) 2)))
              (title "A hackable text editor for the 21st Century!"))
         (erase-buffer)
         (setq mode-line-format nil)
         (goto-char (point-min))
         (insert (make-string top-margin ?\n ))
         (insert (make-string left-margin ?\ ))
         (insert-image image)
         (insert "\n\n\n")
         (insert (make-string (floor (/ (- (window-width) (string-width title)) 2)) ?\ ))
         (insert title))
       (setq cursor-type nil)
       (read-only-mode +1)
       (switch-to-buffer (current-buffer))
       (local-set-key (kbd "q") 'kill-this-buffer)))

  (when (< (length command-line-args) 2)
    (add-hook 'emacs-startup-hook (lambda ()
                                   (when (display-graphic-p)
                                     (axiom/dashboard)))))

#+end_src

*** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    (prog-mode . rainbow-delimiters-mode)
    (org-mode . rainbow-delimiters-mode))
#+end_src

** Fonts
*** =font-installed-p=
#+begin_src emacs-lisp
  (defun axiom/font-installed-p (font-name)
    (find-font (font-spec :name font-name)))
#+end_src

*** All the Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :config
    (when (and (not (axiom/font-installed-p "all-the-icons"))
               (window-system))
      (all-the-icons-install-fonts t)))
#+end_src
*** Default Fonts
**** Install Defaults
  #+begin_src emacs-lisp
    (defun install-default-fonts ()
      (when (and
             (window-system)
             (string-equal system-type "darwin"))
        (progn
          (message "Installing Default Fonts")
          (call-process "/bin/bash" nil nil nil "-c" "cp ~/.emacs.d/fonts/*.ttf ~/Library/Fonts")
          (message "Installed Default Fonts"))))
#+end_src
**** Set Defaults
#+begin_src emacs-lisp
      (defvar axiom/fixed-pitch-height 130)
      (defvar axiom/variable-pitch-height 130)
      (setq-default line-spacing 0.2)

      (defvar axiom/fixed-pitch-font (if (member "Berkeley Mono" (font-family-list))
                                         "Berkeley Mono"
                                       "SF Mono"))

      (if (not (and (member "Hubot-Sans" (font-family-list)) (member "Mona Sans" (font-family-list))))
          (install-default-fonts))

      (defvar axiom/variable-pitch-font "Mona Sans")

      (defvar axiom/comment-face axiom/fixed-pitch-font)

      (defvar axiom/org-mode-code-font "SF Mono")

      (defvar axiom/title-font "Hubot-Sans")


      (set-face-attribute 'default nil :font axiom/fixed-pitch-font :height axiom/fixed-pitch-height)
      (set-face-attribute 'fixed-pitch nil :font axiom/fixed-pitch-font :height axiom/fixed-pitch-height)

      (set-face-attribute 'variable-pitch nil :font axiom/variable-pitch-font :height axiom/variable-pitch-height)
      (set-face-attribute 'font-lock-comment-face nil :slant 'italic :font axiom/comment-face :inherit '(shadow))
      (set-face-attribute 'mode-line nil
                          :font axiom/fixed-pitch-font)
     #+end_src

*** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://" "<-"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

** SQL Highlighting
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.sqli\\'" . sql-mode))
  (use-package mmm-mode
    :ensure t
    :custom
    (mmm-global-mode 'maybe)
    :config
    (set-face-background 'mmm-default-submode-face nil)
    (mmm-add-classes
     '((embedded-sql
        :submode sql-mode
        :face mmm-code-submode-face
        :front "\\(--SQL\\)"
        :back "\\(--SQL-END\\)")))
    (mmm-add-mode-ext-class 'prog-mode nil 'embedded-sql))

#+end_src

** Quick Reload
#+begin_src emacs-lisp
  (defun revert-buffer-no-confirm ()
    "Revert the current buffer without asking permission"
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)
  (global-set-key (kbd "s-r") 'revert-buffer-no-confirm)
#+end_src

** Which Key
which-key is a useful UI panel that appears when you start pressing any key
binding in Emacs to offer you all possible completions for the prefix.
For example, if you press =C-c= (hold control and press the letter c), a panel
will appear at the bottom of the frame displaying all of the bindings under that
prefix and which command they run. This is very useful for learning the possible
key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

** Better Window Navigation
*** With =ace-window=
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "C-x o") 'ace-window))
#+end_src

* Org Mode
Org Mode is one of the hallmark features of Emacs. It is a rich document editor,
project planner, task and time tracker, blogging engine, and literate coding
utility all wrapped up in one package.

** Basic Config

#+begin_src emacs-lisp
  (use-package org
    :demand t
    :straight t
    :hook
    (org-mode . visual-line-mode)
    (org-mode . variable-pitch-mode)
    (org-mode . (lambda () (indent-tabs-mode -1)))
    (org-mode . org-num-mode)

    :config
    (setq
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…")


    (dolist (face '((org-level-1 . 1.30)
                    (org-level-2 . 1.20)
                    (org-level-3 . 1.10)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.05)
                    (org-level-6 . 1.05)
                    (org-level-7 . 1.05)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :font axiom/title-font :weight 'regular :height (cdr face)))

    (set-face-attribute 'org-document-title nil :font axiom/title-font :height 1.50)
    (set-face-attribute 'org-document-info nil :font axiom/title-font :inherit '(shadow) :height 1.20)

    (set-face-attribute 'org-block nil :foreground nil :font axiom/org-mode-code-font :height 120 :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :font axiom/org-mode-code-font :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :font axiom/org-mode-code-font :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :font axiom/org-mode-code-font :inherit '(shadow fixed-pitch)))
#+end_src

*** Custom Numbering
#+begin_src emacs-lisp
  (defun writer-mode--num-format (numbering)
    "Alternative numbering format for org-num.
     First level: 1 | xxx
     Second level: 1.1 — xxx
     Third level: 1.1.1 - xxx
     etc.
    "
    (if (= (length numbering) 1)
        (propertize (concat (mapconcat
                             #'number-to-string
                             numbering ".") " | " )
                    'face `(:family axiom/title-font
                                    :foreground ,(face-foreground 'shadow nil t)))
      (propertize (concat (mapconcat
                           #'number-to-string
                           numbering ".") " — " )
                  'face `(:family axiom/title-font
                                  :foreground ,(face-foreground 'shadow nil t)))))

  (font-lock-add-keywords 'org-mode
                          '(("^*+ " 0 `(:family axiom/title-font
                                                :height 140
                                                :foreground ,(face-foreground 'shadow nil t)) prepend)
                            ) 'append)

  (setq org-num-skip-unnumbered t)
  (setq org-num-skip-footnotes t)
  (setq org-num-max-level 3)
  (setq org-num-face nil)


  (setq org-modern-hide-stars nil)
  (setq org-modern-star nil)
  (setq org-num-format-function 'writer-mode--num-format)

#+end_src

*** Org-Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))
#+end_src

** Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Zettelkasten")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :config
    (require 'org-fold) ; Required to ensure the library loads for reasons I cannot yet fathom
    (org-roam-setup))
#+end_src

* Project-Management
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom
    (projectile-enable-caching t)
    (projectile-indexing-method 'alien)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Development")
      (setq projectile-project-search-path '("~/Development" "~/Development/coppercrm")))
    (setq projectile-switch-project-action #'projectile-dired)
    :config
    (projectile-global-mode))

  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode))
#+end_src

* Searching and Fuzzy-Finding
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-s" . consult-line)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file)

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )

#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Helpful Help Commands
Helpful adds a lot of very helpful (get it?) information to Emacs' describe-
command  buffers. For example, if you use describe-function, you will not only
get the documentation about the function, you will also see the source code of
the function and where it gets used in other places in the Emacs configuration.
It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command]  . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key]      . helpful-key))
#+end_src

* Git/Github
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)

  (use-package forge
    :ensure t
    :after magit)
#+end_src

** Highlight Git diffs in the gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 't))
#+end_src

** Why This?
=why-this= shows blam information for the currently selected line (or region) along the right side of the current line
#+begin_src emacs-lisp
  (use-package why-this
    :ensure t
    :custom (why-this-idle-delay 0)
    :bind
    ("C-c b" . why-this-mode)
    ("C-c w" . why-this))
#+end_src

* Syntax Checking
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :custom (flycheck-check-syntax-automatically '(save mode-enabled))
    :init (global-flycheck-mode))

  (defvar-local axiom--mode-line-flycheck "")

  (defun axiom/mode-line-update-flycheck (&rest _)
    (setq axiom--mode-line-flycheck
          (if (bound-and-true-p flycheck-mode)
              (concat
               "  "
               (pcase flycheck-last-status-change
                 (`not-checked (propertize "-/-" 'help-echo "Flycheck: not checked"))
                 (`no-checker (propertize "-" 'help-echo "Flycheck: no checker"))
                 (`running (propertize "*/*" 'help-echo "Flycheck: checking"))
                 (`errored (propertize "!" 'help-echo "Flycheck: error"))
                 (`finished
                  (let-alist (flycheck-count-errors flycheck-current-errors)
                    (propertize (format "%s/%s" (or .error 0) (or .warning 0))
                                'help-echo (if (or .error .warning)
                                               (concat "Flycheck: "
                                                       (when .error (format "%d errors%s" .error (if .warning ", " "")))
                                                       (when .warning (format "%d warnings" .warning))
                                                       "\nmouse-1: list errors")
                                             "Flycheck: no errors or warnings")
                                'local-map 'flycheck-error-list-mode-line-map)))
                 (`interrupted (propertize "x" 'help-echo "Flycheck: interrupted"))
                 (`suspicious (propertize "?" 'help-echo "Flycheck: suspicious"))))
            "")))

  (add-hook 'flycheck-status-changed-functions #'axiom/mode-line-update-flycheck)
  (add-hook 'flycheck-mode-hook #'axiom/mode-line-update-flycheck)
#+end_src

* Auto-Completion
** Copilot
#+begin_src emacs-lisp
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :hook (prog-mode . copilot-mode)
    :config
    (define-key copilot-completion-map (kbd "C-f") 'copilot-accept-completion) ; using forward motion to accept completion like Warp
    (define-key copilot-completion-map (kbd "<right>") 'copilot-accept-completion)
    :ensure t)
#+end_src

** Company-mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook ((prog-mode) . (lambda () (company-mode)))
    :bind (:map company-mode-map
                ("<tab>" . 'company-indent-or-complete-common)
                :map company-active-map
                ("C-n" . 'company-select-next-or-abort)
                ("C-p" . 'company-select-previous-or-abort))
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t)
    (lsp-completion-provider :capf) ; used for eglot integration

    (company-show-quick-access t)
    :config
    (company-tng-configure-default))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src

* Tab to Complete
#+begin_src emacs-lisp
(setq tab-always-indent 'complete)
#+end_src

* Open Emacs GUI above terminal
#+begin_src emacs-lisp
  (x-focus-frame nil)
#+end_src

* LSP Features
** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :bind
    (("s-." . eglot-code-actions)
    ("<f12>" . eglot-find-typeDefinition)
    ("<f2>" . eglot-rename))
    :hook
    (scala-mode . eglot-ensure)
    (typescript-mode . eglot-ensure)
    (python-mode . eglot-ensure)
    (go-mode . eglot-ensure)
    (f90-mode . eglot-ensure)
    (zig-mode . eglot-ensure)
    :config (setq lsp-prefer-flymake nil)
    (add-to-list 'eglot-server-programs
      '((go-mode go-ts-mode) .
          ("gopls" :initializationOptions
             (:hints (:parameterNames t
                      :rangeVariableTypes t
                      :functionTypeParameters t
                      :assignVariableTypes t
                      :compositeLiteralFields t
                      :compositeLiteralTypes t
                      :constantValues t))))))
#+end_src
*** Format Imports on Save
#+begin_src emacs-lisp
 (defun my-eglot-organize-imports () (interactive)
   (eglot-code-actions nil nil "source.organizeImports" t))
 (add-hook 'before-save-hook 'my-eglot-organize-imports nil t)
 (add-hook 'before-save-hook 'eglot-format-buffer)
 #+end_src

** Tree-Sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode t))

  (use-package tree-sitter-langs :ensure t)
#+end_src

* Language Specific IDE-Like Features
** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :hook
    (go-mode . tree-sitter-hl-mode)
    (go-mode . (lambda () (ligature-mode -1)))
    :config
    (setq gc-cons-threshold 100000000)
    (add-hook 'before-save-hook 'gofmt-before-save)
    (setq gofmt-command "goimports")
    (setq read-process-output-max (* 1024 1024)))
#+end_src

** Python
*** PEP8-compliant comments
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (setq comment-start " # ")))
#+end_src
*** Black
#+begin_src emacs-lisp
  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src

** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))
#+end_src

** Julia
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)

  (use-package julia-repl)

  (use-package eglot-jl)

  (use-package julia-mode
    :mode "\\.jl\\'"
    :interpreter ("julia" . julia-mode)
    :init (setenv "JULIA_NUM_THREADS" "6")
    :config
    (add-hook 'julia-mode-hook 'julia-repl-mode)
    (add-hook 'julia-mode-hook 'eglot-jl-init)
    (add-hook 'julia-mode-hook 'eglot-ensure)
    (add-hook 'julia-mode-hook (lambda () (setq julia-repl-set-terminal-backend 'vterm))))

  (setq eglot-jl-julia-command "/usr/local/bin/julia")
  (setq julia-repl-executable-records
        '((default "/usr/local/bin/julia")
          (master "/usr/local/bin/julia")))
#+end_src

** Tex
#+begin_src emacs-lisp
  (use-package tex
    :defer t
    :straight auctex
    :ensure auctex
    :config
    (setq TeX-auto-save t)
    (setq-default TeX-engine 'xetex)
    (setq-default TeX-PDF-mode t))

  (use-package preview-latex
    :defer t
    :straight auctex
    :ensure auctex)

#+end_src

** Protobufs
#+begin_src emacs-lisp
  (use-package protobuf-mode
	:straight t)
#+end_src

** Fortran
#+begin_src emacs-lisp
  (add-to-list 'eglot-server-programs '(f90-mode . ("fortls" "--notify_init" "--nthreads=4")))
#+end_src

** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
  :straight t)
#+end_src

* Sampling the Future
** ChatGPT
#+begin_src emacs-lisp
  (use-package chatgpt-shell
    :ensure t
    :straight (:host github :repo "xenodium/chatgpt-shell" :files ("dist" "*.el"))
    :config
    (setq chatgpt-shell-openai-key (replace-regexp-in-string "\n\\'" "" (with-temp-buffer
                                     (insert-file-contents "~/.emacs.d/chatgpt-api-key.txt")
                                     (buffer-string)))))
#+end_src
