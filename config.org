#+TITLE: Emacs Config
#+AUTHOR: Matthew Cooper Healy

* Package Management
** Package Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 0)))

  (add-to-list 'load-path "~/.emacs.d/modules") ; add local files
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
      (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (setq auto-package-update-interval 30)
    (auto-package-update-maybe))
#+END_SRC

* Quality of Life Improvements
** Replace Selection
When text is highlighted, typing should delete the highlighted text and insert what is typed.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** Usage Guides
=discover.el= mostly just helps with =dired= mode, but it's worth including for new users.
#+BEGIN_SRC emacs-lisp
  (use-package discover
    :ensure t
    :config
    (global-discover-mode 1))
#+END_SRC

** Mouse in Terminal
#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode 1)
#+END_SRC

** Whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; whitespace-space-regexp will only work with selective highlighting, not with space-mark
;(setq whitespace-space-regexp "\\( \\{2,\\}\\)")
(setq whitespace-style (quote (face tabs newline tab-mark newline-mark)))
(custom-set-faces
  '(whitespace-tab((t (:foreground "#E06C75")))) ; make tabs _very_ noticable
  '(whitespace-space((t (:foreground "#525252"))))
  '(whitespace-newline((t (:foreground "#525252")))))
(setq whitespace-display-mappings
  '((space-mark 32 [183] [46])
    (newline-mark 10 [172 10])
    (tab-mark 9 [187 9] [92 9])))
(global-whitespace-mode 1)

(setq-default indent-tabs-mode nil) ; never indent with tabs
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(if (version<= "26.0.50" emacs-version)
  (global-display-line-numbers-mode)
  (progn
    (global-linum-mode t)
    (setq linum-format "%4d \u2502 ")))
#+END_SRC

** Column Ruler
I like to display a column ruler at common styleguide limits
(famously, 80 characters, but also often 100 and 120 characters).
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+END_SRC

** Look
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (if (window-system)
        (load-theme 'doom-one t))) ; Only load in GUI to reduce issues with comment-coloring
#+END_SRC

*** Org-Mode
#+BEGIN_SRC emacs-lisp
      (require 'color)

      (use-package org
        :ensure t
        :commands (org-capture org-agenda)
        :config
        (add-hook 'org-mode-hook 'org-indent-mode)
        (add-hook 'org-mode-hook 'no-linum))

      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

*** Remove Default Trash
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
#+END_SRC

*** Cursor
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(bar . 1))
#+END_SRC

*** Truncate, Don't Wrap
#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
  (define-fringe-bitmap 'right-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
  (define-fringe-bitmap 'left-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
#+END_SRC

*** Focus Line
#+BEGIN_SRC emacs-lisp
  (if (window-system)
      (global-hl-line-mode 1))
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp
    (defun no-linum ()
      (display-line-numbers-mode -1))

    (use-package dashboard
      :ensure t
      :config
      (setq dashboard-banner-logo-title "Welcome to the Isomorph Research Laboratories AXIOM Editing environment.")
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ; for emacs daemon
      (setq dashboard-items '((projects . 5)
                              (recents . 5)
                              (agenda . 5)))
      (setq dashboard-set-heading-icons t)
      (dashboard-modify-heading-icons '((recents . "file-text")))
      (setq dashboard-set-navigator t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-startup-banner "~/.emacs.d/img/axiom.png") ; set to path to image file to customize
      (setq dashboard-set-footer nil)
      (dashboard-setup-startup-hook)
      (setq dashboard-center-content t)
      (add-hook 'dashboard-mode-hook 'no-linum) ; turn off line numbers for dashboard
      (add-hook 'dashboard-mode-hook 'olivetti-mode)
      (add-hook 'prog-mode-hook (lambda () (if (one-window-p) (olivetti-mode)))))
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC

** Fonts
*** Installing
#+BEGIN_SRC emacs-lisp
  (defun install-iosevka ()
    (when (and (window-system) ( not (string-equal system-type "windows-nt")))
      (progn
        (message "Installing Iosevka -- You might want to grab a cup of something...")
        (call-process "/bin/bash" nil nil nil "-c" "wget 'https://github.com/be5invis/Iosevka/releases/download/v5.1.1/ttf-iosevka-5.1.1.zip' -O ~/.emacs.d/fonts/iosevka.zip")
        (call-process "/bin/bash" nil nil nil "-c" "unzip ~/.emacs.d/fonts/iosevka.zip -d ~/.local/share/fonts")
        (call-process "/bin/bash" nil nil nil "-c" "rm ~/.emacs.d/fonts/iosekva.zip")
        (message "Installed Iosevka"))))


  (defun install-all-the-icons ()
    (message "Installing all-the-icons")
    (copy-directory "~/.emacs.d/fonts/all-the-icons" "~/.local/share/fonts/all-the-icons")
    (message "Installed all-the-icons"))


  (defun cache-fonts ()
    (unless
        (string-equal system-type "windows-nt")
      (progn
        (message "Running fc-cache -f")
        (call-process "/bin/bash" nil nil nil "-c" "fc-cache -f")
        (message "Fonts installed"))))

  (unless (window-system)
    (progn
      (unless (file-directory-p "~/.local/share/fonts")
        (make-directory "~/.local/share/fonts" :parents))
      (unless (member "Iosevka" (font-family-list))
        (install-iosevka))
      (unless (member "all-the-icons" (font-family-list))
        (install-all-the-icons))
      (cache-fonts)))
#+END_SRC

*** Defaults
#+BEGIN_SRC emacs-lisp
  (defun set-fonts ()
    (interactive)
    (add-to-list 'default-frame-alist '(font . "Iosevka"))
    (set-face-attribute 'default t :font "Iosevka")
    (set-face-attribute 'mode-line nil :weight 'extra-bold :font "Iosevka")
    (custom-set-faces
      '(font-lock-comment-face ((t (:foreground "#5B6268" :weight light :slant italic :family "Iosevka")))))
    (set-frame-font "Iosevka"))

  (set-fonts)
#+END_SRC

*** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t) ; recommend installing icons manually, this rarely works
#+END_SRC

*** Ligatures
This can only be used if this build of emacs includes commit ~fe903c5ab7354b97f80ecf1b01ca3ff1027be446~, which
did not make it into emacs 27.1. If emacs is build from =master= or =native-comp=, the issue should be fixed.

#+BEGIN_SRC emacs-lisp
      (use-package ligature
        :load-path "~/.emacs.d/mickeynp-ligature"
        :config
        ;; Enable traditional ligature support in eww-mode, if the
        ;; `variable-pitch' face supports it
        (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
        ;; Enable all Iosevka ligatures in programming modes
        (ligature-set-ligatures 'prog-mode '("<--" "<---" "<<-" "<-" "->" "->>" "-->" "--->"
                                             "<->" "<-->" "<--->" "<---->" "<!--" "<!---"
                                             "<==" "<===" "<=" "=>" "==>" "===>" ">="
                                             "<=>" "<==>" "<===>" "<====>"
                                             "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!="
                                             "===" "!==" ":=" ":-" ":+" "<*" "<*>" "*>"
                                             "<|" "<|>" "|>" "+:" "-:" "=:" "<***>" "++" "+++"))
        ;; Enables ligature checks globally in all buffers. You can also do it
        ;; per mode with `ligature-mode'.
        ;(global-ligature-mode t) ; uncomment if fix commit in place
        )

#+END_SRC

** SQL Highlighting
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.sqli\\'" . sql-mode))
  (use-package mmm-mode
    :ensure t
    :custom
    (mmm-global-mode 'maybe)
    :config
    (set-face-background 'mmm-default-submode-face nil)
    (mmm-add-classes
      '((python-sql
        :submode sql-mode
        :face mmm-code-submode-face
        :front "\\(--SQL\\)"
        :back "\\(--SQL\\).*)")))
    (mmm-add-mode-ext-class 'python-mode nil 'python-sql)) ; TODO: add hooks for other used languages

#+END_SRC

** Quick Reload
#+BEGIN_SRC emacs-lisp
  (defun revert-buffer-no-confirm ()
    "Revert the current buffer without asking permission"
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)
#+END_SRC

** Zen Mode (Olivetti)
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t
    :config
    (setq-default olivetti-body-width 120)
    (add-hook 'org-mode-hook 'olivetti-mode)

    (global-set-key (kbd "<f12>") 'olivetti-mode)
    (global-set-key (kbd "C-M-z") 'olivetti-mode))
#+END_SRC

* Project-Management
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :custom
    (projectile-indexing-method 'alien)
    (projectile-enable-caching t)
    (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode))
#+END_SRC

* Searching and Fuzzy-Finding
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :bind
    (:map ivy-mode-map
      ("C-'" . ivy-avy))
    :custom
    (ivy-use-virtual-buffers t)           ; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer'.
    (ivy-height 10)                       ; number of result lines to display
    (ivy-count-format "")                 ; does not count candidates
    (ivy-initial-inputs-alist nil)        ; no regexp by default
    (ivy-re-builders-alist                ; configure regexp engine.
      '((t . ivy--regex-ignore-order)))   ; allow input not in order
    :config
    (ivy-mode))

  (use-package counsel
    :ensure t
    :after ivy
    :bind
    ("M-x" . counsel-M-x)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-c k" . counsel-ag)
    ("C-h a" . counsel-apropos)
    ("C-x C-f" . counsel-find-file)
    ("C-x b" . ivy-switch-buffer))

  (use-package swiper
    :ensure t
    :after ivy
    :bind
    ("C-s" . swiper)
    ("C-r" . swiper)) ; replace standard search functionality
#+END_SRC


* Git/Github
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-c b") 'magit-blame)) ; Add shortcut for blame

  (use-package magithub
    :after magit
    :ensure t
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/octokitty/")
    (setq auth-sources '("~/.authinfo")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
      (use-package diff-hl
        :ensure t
        :config
        (global-diff-hl-mode))
#+END_SRC

* Tab to Complete
#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

* LSP Features
** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :ensure t
    :config
    (add-hook 'python-mode-hook 'eglot-ensure)
    (add-hook 'haskell-mode-hook 'eglot-ensure)
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure))
#+END_SRC

* Language Specific IDE-Like Features
** Scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :config
    (add-hook 'scheme-mode-hook 'fira-code-mode))
#+END_SRC

** Common Lisp
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "sbcl") ; remember to add sbcl to your path!
    (setq slime-contribs '(slime-fancy)))

  (use-package lispy
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1))))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (add-hook 'haskell-mode 'fira-code-mode))
#+END_SRC

** Python
*** Auto-PEP8 On Save
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t
    :config
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

*** PEP8-compliant comments
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
    (lambda ()
      (setq comment-start " # ")))
#+END_SRC

** C++
*** Format on Save
#+BEGIN_SRC emacs-lisp
  (defun clang-format-on-save ()
    (add-hook 'before-save-hook #'clang-format-buffer nil 'local))

;(add-hook 'c++-mode-hook 'clang-format-on-save)
;(add-hook 'c-mode-hook 'clang-format-on-save)
#+END_SRC

*** General QoL
The styleguides I use ask for a 100-char column limit
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook (lambda () (setq fill-column 100)))
#+END_SRC

They also require a 4-space indent.
#+BEGIN_SRC emacs-lisp
  (defun my-c-mode-common-hook ()
    ;; my customizations for all of c-mode, c++-mode, objc-mode, java-mode
    (c-set-offset 'substatement-open 0)
    ;; other customizations can go here

    (setq c++-tab-always-indent t)
    (setq c-basic-offset 4)                  ;; Default is 2
    (setq c-indent-level 4)                  ;; Default is 2

    (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
    (setq tab-width 4)
    (setq indent-tabs-mode nil)  ; use spaces only if nil
    )

  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+END_SRC
