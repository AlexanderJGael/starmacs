#+TITLE: Emacs Config
#+AUTHOR: Matthew Cooper Healy

* Package Management
** Package Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 0)))

  (add-to-list 'load-path "~/.emacs.d/modules") ; add local files
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
      (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (setq auto-package-update-interval 30)
    (auto-package-update-maybe))
#+END_SRC

* Quality of Life Improvements
** Keep Buffers Up to Date with Files
When files on disk change, open buffers should be automatically updated to reflect those changes.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Do Not Create Extra Files
Don't create =backup~= or =#autosave#= files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

** Replace Selection
When text is highlighted, typing should delete the highlighted text and insert what is typed.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** Usage Guides
=discover.el= mostly just helps with =dired= mode, but it's worth including for new users.
#+BEGIN_SRC emacs-lisp
  (use-package discover
    :ensure t
    :config
    (global-discover-mode 1))
#+END_SRC

** Mouse in Terminal
#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode 1)
#+END_SRC

** Whitespace
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; whitespace-space-regexp will only work with selective highlighting, not with space-mark
                                          ;(setq whitespace-space-regexp "\\( \\{2,\\}\\)")
  (setq whitespace-style (quote (face tabs newline tab-mark newline-mark)))
  (custom-set-faces
   '(whitespace-tab((t (:foreground "#E06C75")))) ; make tabs _very_ noticable
   '(whitespace-space((t (:foreground "#525252"))))
   '(whitespace-newline((t (:foreground "#525252")))))
  (setq whitespace-display-mappings
        '((space-mark 32 [183] [46])
          (newline-mark 10 [172 10])
          (tab-mark 9 [187 9] [92 9])))
  (global-whitespace-mode 1)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
  (if (version<= "26.0.50" emacs-version)
      (global-display-line-numbers-mode)
    (progn
      (global-linum-mode t)
      (setq linum-format "%4d \u2502 ")))
#+END_SRC

** Column Ruler
I like to display a column ruler at common styleguide limits
(famously, 80 characters, but also often 100 and 120 characters).
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+END_SRC

** Look
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (if (window-system)
        (load-theme 'doom-one t))) ; Only load in GUI to reduce issues with comment-coloring
#+END_SRC

*** Org-Mode
#+BEGIN_SRC emacs-lisp
  (require 'color)

  (use-package org
    :ensure t
    :commands (org-capture org-agenda)
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'no-linum))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

*** Remove Default Trash
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
#+END_SRC

*** Cursor
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(bar . 1))
#+END_SRC

*** Truncate, Don't Wrap
#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
  (define-fringe-bitmap 'right-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
  (define-fringe-bitmap 'left-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
#+END_SRC

*** Focus Line
#+BEGIN_SRC emacs-lisp
  (if (window-system)
      (global-hl-line-mode 1))
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp
      (defun no-linum ()
        (display-line-numbers-mode -1))

      (use-package dashboard
        :ensure t
        :config
        (setq dashboard-banner-logo-title "Welcome to Emacs, A hackable text editor for the 21st Century!")
        (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ; for emacs daemon
        (setq dashboard-items '((projects . 5)
                                (recents . 5)
                                (agenda . 5)))
        (dashboard-modify-heading-icons '((recents . "file-text")))
        (setq dashboard-set-navigator t)
        (setq dashboard-set-file-icons t)
        (setq dashboard-startup-banner "~/.emacs.d/img/emacs.png") ; set to path to image file to customize
        (setq dashboard-set-footer nil)
        (dashboard-setup-startup-hook)
        (setq dashboard-center-content t)
        (add-hook 'dashboard-mode-hook 'no-linum) ; turn off line numbers for dashboard
        (add-hook 'dashboard-mode-hook 'dired-sidebar-hide-sidebar))
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC

*** Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :defer .1 ;; don't block emacs when starting, load evil immediately after startup
    :init
    (setq evil-want-integration nil) ;; required by evil-collection
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
    (setq evil-split-window-below t) ;; like vim's 'splitbelow'
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-default-state 'normal)
    :config
    (evil-mode)
    (add-hook 'prog-mode-hook 'evil-mode)
      ;; visual hints while editing
  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-use-diff-faces)
    (evil-goggles-mode))

  (message "Loading evil-mode...done"))

#+END_SRC emacs-lisp

** Fonts
*** Installing
#+BEGIN_SRC emacs-lisp
  (defun install-plex ()
    (when (and (window-system) ( not (string-equal system-type "windows-nt")))
      (progn
        (message "Installing IBM Plex -- You might want to grab a cup of something...")
        (call-process "/bin/bash" nil nil nil "-c" "wget 'https://github.com/IBM/plex/releases/download/v6.0.2/OpenType.zip' -O ~/.emacs.d/fonts/plex.zip")
        (call-process "/bin/bash" nil nil nil "-c" "unzip ~/.emacs.d/fonts/plex.zip -d ~/.local/share/fonts")
        (call-process "/bin/bash" nil nil nil "-c" "rm ~/.emacs.d/fonts/plex.zip")
        (message "Installed IBM Plex"))))

  (defun cache-fonts ()
    (unless
        (string-equal system-type "windows-nt")
      (progn
        (message "Running fc-cache -f")
        (call-process "/bin/bash" nil nil nil "-c" "fc-cache -f")
        (message "Fonts installed"))))

  (unless (window-system)
    (progn
      (unless (file-directory-p "~/.local/share/fonts")
        (make-directory "~/.local/share/fonts" :parents))
      (unless (member "IBM Plex Mono" (font-family-list))
        (install-plex))
      (cache-fonts)))
#+END_SRC

*** Defaults
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "IBM Plex Mono" :height 140)
  (set-face-attribute 'mode-line nil
                        :weight 'extra-bold ;should be _very_ bold
                        :font "IBM Plex Mono"     ;same font
                        :height 1.05)       ;should be a little larger than regular text

  (set-face-attribute 'font-lock-comment-face nil :foreground "#5B6268" :slant 'italic :weight 'light :font "IBM Plex Mono")
#+END_SRC

** SQL Highlighting
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.sqli\\'" . sql-mode))
  (use-package mmm-mode
    :ensure t
    :custom
    (mmm-global-mode 'maybe)
    :config
    (set-face-background 'mmm-default-submode-face nil)
    (mmm-add-classes
      '((embedded-sql
        :submode sql-mode
        :face mmm-code-submode-face
        :front "\\(--SQL\\)"
        :back "\\(--SQL-END\\)")))
    (mmm-add-mode-ext-class 'prog-mode nil 'embedded-sql))

#+END_SRC

** Quick Reload
#+BEGIN_SRC emacs-lisp
  (defun revert-buffer-no-confirm ()
    "Revert the current buffer without asking permission"
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)
  (global-set-key (kbd "s-r") 'revert-buffer-no-confirm)
#+END_SRC

** Better Navigation
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s-h") 'windmove-left)
  (global-set-key (kbd "C-s-j") 'windmove-down)
  (global-set-key (kbd "C-s-k") 'windmove-up)
  (global-set-key (kbd "C-s-l") 'windmove-right)
#+END_SRC

* Project-Management
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :custom
    (projectile-indexing-method 'alien)
    (projectile-enable-caching t)
    (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode))
#+END_SRC

** Tree View
#+BEGIN_SRC emacs-lisp
   (use-package vscode-icon
     :ensure t
     :commands (vscode-icon-for-file))

   (use-package dired-sidebar
     :ensure t
     :commands (dired-sidebar-toggle-sidebar)
     :config
         (global-set-key (kbd "s-b") 'dired-sidebar-toggle-sidebar))

  (dired-sidebar-show-sidebar)
#+END_SRC

* Searching and Fuzzy-Finding
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :bind
    (:map ivy-mode-map
      ("C-'" . ivy-avy))
    :custom
    (ivy-use-virtual-buffers t)           ; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer'.
    (ivy-height 10)                       ; number of result lines to display
    (ivy-count-format "")                 ; does not count candidates
    (ivy-initial-inputs-alist nil)        ; no regexp by default
    (ivy-re-builders-alist                ; configure regexp engine.
      '((t . ivy--regex-ignore-order)))   ; allow input not in order
    :init
    (ivy-mode 1))

  (use-package counsel
    :ensure t
    :bind*
    ("M-x" . counsel-M-x)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-c k" . counsel-ag)
    ("C-h a" . counsel-apropos)
    ("C-x C-f" . counsel-find-file)
    ("C-x b" . ivy-switch-buffer))

  (use-package swiper
    :ensure t
    :bind*
    ("C-s" . swiper-isearch)
    ("C-r" . swiper-isearch-backward)) ; replace standard search functionality
#+END_SRC

* Git/Github
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-c b") 'magit-blame)) ; Add shortcut for blame

  (use-package magithub
    :after magit
    :ensure t
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/Development/")
    (setq auth-sources '("~/.authinfo")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
      (use-package diff-hl
        :ensure t
        :config
        (global-diff-hl-mode))
#+END_SRC

* Syntax Checking
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :custom (flycheck-check-syntax-automatically '(save mode-enabled))
    :init (global-flycheck-mode))
#+END_SRC

* Auto-Completion
** Company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind (:map company-active-map
                ("C-j" . company-select-next)
                ("C-k" . company-select-previous))
    :custom
    (company-idle-delay 0.3)
    (company-toltip-align-annotations t)
    :config
    (global-company-mode t))
#+END_SRC

* Tab to Complete
#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

* Open Emacs GUI above terminal
#+BEGIN_SRC emacs-lisp
  (x-focus-frame nil)
#+END_SRC

* LSP Features
** LSP-Mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((python-mode . lsp)
           (haskell-mode . lsp)
           (c-mode . lsp)
           (go-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :ensure t :commands lsp-ui-mode)
  (use-package lsp-ivy :ensure t :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)
  (use-package dap-mode :ensure t)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
      :ensure t
      :config
      (which-key-mode))
#+END_SRC

** Tree-Sitter
#+BEGIN_SRC emacs-lisp
(use-package tree-sitter :ensure t)
(use-package tree-sitter-langs :ensure t)
#+END_SRC

* Language Specific IDE-Like Features
** Python
*** Auto-PEP8 On Save
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t
    :config
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

*** PEP8-compliant comments
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
    (lambda ()
      (setq comment-start " # ")))
#+END_SRC

** TypeScript
*** Add Node Modules Binaries
This is taken from [[https://github.com/codesuki/add-node-modules-path/blob/master/add-node-modules-path.el][codesuki's function]] to add all of the binaries in the project's
=node_modules= folder to the exec path, allowing use of local =prettier=, =eslint=, etc.
#+BEGIN_SRC emacs-lisp
  (require 's)

(defgroup add-node-modules-path nil
  "Put node_modules binaries into `exec-path'."
  :prefix "add-node-modules-path-"
  :group 'environment)

;;;###autoload
(defcustom add-node-modules-path-command "npm bin"
  "Command to find the bin path."
  :type 'string)

;;;###autoload
(defcustom add-node-modules-path-debug nil
  "Enable verbose output when non nil."
  :type 'boolpean
  :group 'add-node-modules-path)

;;;###autoload
(defun add-node-modules-path ()
  "Run `npm bin` command and add the path to the `exec-path`.
If `npm` command fails, it does nothing."
  (interactive)

  (let* ((res (s-chomp (shell-command-to-string add-node-modules-path-command)))
         (exists (file-exists-p res))
         )
    (cond
     (exists
      (make-local-variable 'exec-path)
      (add-to-list 'exec-path res)
      (when add-node-modules-path-debug
        (message "Added to `exec-path`: %s" res))
      )
     (t
      (when add-node-modules-path-debug
        (message "Failed to run `%s':\n %s" add-node-modules-path-command res))
      ))
    )
  )

(provide 'add-node-modules-path)
#+END_SRC

*** Tide
#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode ()
    "Setup function for Tide"
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (use-package tide
    :ensure t
    :after (typescript-mode flycheck company)
    :hook (typescript-mode . setup-tide-mode)
          (typescript-mode . tide-hl-identifier-mode))
#+END_SRC

*** Prettier
#+BEGIN_SRC emacs-lisp
        (use-package prettier-js
          :ensure t
          :after (typescript-mode)
          :hook
          (typescript-mode . prettier-js-mode)
          (typescript-mode . add-node-modules-path)
          (before-save . prettier-js))
#+END_SRC

** Julia
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t)

  (use-package julia-snail
    :ensure t
    :hook (julia-mode . julia-snail-mode))
#+END_SRC

* AI-Assisted Programming
** Github Copilot
#+BEGIN_SRC emacs-lisp
   ;; accept completion from copilot and fallback to company
  (defun my-tab ()
    (interactive)
    (or (copilot-accept-completion)
        (Companyg-indent-or-complete-common nil)))

  (use-package copilot
    :after company
    :hook (prog-mode . copilot-mode)
    :bind (("C-TAB" . 'copilot-accept-completion-by-word)
           ("C-<tab>" . 'copilot-accept-completion-by-word)
           :map company-active-map
           ("<tab>" . 'my-tab)
           ("TAB" . 'my-tab)
           :map company-mode-map
           ("<tab>" . 'my-tab)
           ("TAB" . 'my-tab)))
#+END_SRC
