#+TITLE: Emacs Config
#+AUTHOR: Matthew Cooper Healy


* Package Management

** Package Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 0)))

  (add-to-list 'load-path "~/.emacs.d/modules") ; add local files
#+END_SRC


** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
      (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (setq auto-package-update-interval 30)
    (auto-package-update-maybe))
#+END_SRC


* Quality of Life Improvements

** Solaire Mode
#+BEGIN_SRC emacs-lisp
  (defun axiom/real-buffer-p (&optional buffer)
    "Determines whether BUFFER is real."
    (not (or (string-match-p
                (regexp-opt '("*Treemacs"
                            "*vterm*"
                            " *Minibuf"
                            " *Echo Area"
                            "*Process List*"
                            "*Ediff"
                            " *LV*"
                            "*Ilist*"))
                (buffer-name buffer))
            (minibufferp))))

  (use-package solaire-mode
    :ensure t
    :commands (solaire-global-mode)
    :custom
    (solaire-mode-real-buffer-fn #'axiom/real-buffer-p)
    :init
    (solaire-global-mode 1))
#+END_SRC


** Keep Buffers Up to Date with Files
When files on disk change, open buffers should be automatically updated to reflect those changes.
#+BEGIN_SRC emacs-lisp
 (global-auto-revert-mode t)
#+END_SRC


** Do Not Create Extra Files
Don't create =backup~= or =#autosave#= files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC


** Add path to extra binaries
#+BEGIN_SRC emacs-lisp
    (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match
  that used by the user's shell.

  This is particularly useful under Mac OS X and macOS, where GUI
  apps are not started from a shell."
    (interactive)
    (let ((path-from-shell
            (replace-regexp-in-string "[ \t\n]*$" ""
                                  (shell-command-to-string "$SHELL --login -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
  (setenv "PATH" (concat (getenv "PATH") ":/opt/anaconda3/bin"))
  (setq exec-path (append exec-path '("/opt/anaconda3/bin")))
#+END_SRC


** Replace Selection
When text is highlighted, typing should delete the highlighted text and insert what is typed.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC


** Usage Guides
=discover.el= mostly just helps with =dired= mode, but it's worth including for new users.
#+BEGIN_SRC emacs-lisp
  (use-package discover
    :ensure t
    :config
    (global-discover-mode 1))
#+END_SRC


** Mouse in Terminal
#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode 1)
#+END_SRC


** Whitespace
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; whitespace-space-regexp will only work with selective highlighting, not with space-mark
                                          ;(setq whitespace-space-regexp "\\( \\{2,\\}\\)")
  (setq whitespace-style (quote (face tabs newline tab-mark newline-mark)))
  (custom-set-faces
   '(whitespace-tab((t (:foreground "#E06C75")))) ; make tabs _very_ noticable
   '(whitespace-space((t (:foreground "#525252"))))
   '(whitespace-newline((t (:foreground "#525252")))))
  (setq whitespace-display-mappings
        '((space-mark 32 [183] [46])
          (newline-mark 10 [172 10])
          (tab-mark 9 [187 9] [92 9])))
  (global-whitespace-mode 1)
#+END_SRC


** Column Ruler
I like to display a column ruler at common styleguide limits
(famously, 80 characters, but also often 100 and 120 characters).
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+END_SRC


** Look

*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (if (window-system)
        (load-theme 'doom-one t))) ; Only load in GUI to reduce issues with comment-coloring
#+END_SRC


*** Org Mode
Org Mode is one of the hallmark features of Emacs. It is a rich document editor,
project planner, task and time tracker, blogging engine, and literate coding
utility all wrapped up in one package.


**** Better Font Faces
The axiom/org-font-setup function configures various text faces to tweak the sizes
of headings and use variable width fonts in most cases so that it looks more
like we're editing a document in org-mode. We switch back to fixed width
(monospace) fonts for code blocks and tables so that they display correctly.

#+BEGIN_SRC emacs-lisp
(defun axiom/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "IBM Plex Serif" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+END_SRC


**** Basic Config
This section contains the basic configuration for org-mode plus the
configuration for Org agendas and capture templates. There's a lot to unpack in
here so I'd recommend watching the videos for Part 5 and Part 6 for a full
explanation.

#+BEGIN_SRC emacs-lisp
  (defun axiom/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . axiom/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Development/org-files/tasks.org"
            "~/Development/org-files/habits.org"
            "~/Development/org-files/birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
        ; Put mutually exclusive tags here
        (:endgroup)
        ("@errand" . ?E)
        ("@home" . ?H)
        ("@work" . ?W)
        ("agenda" . ?a)
        ("planning" . ?p)
        ("publish" . ?P)
        ("batch" . ?b)
        ("note" . ?n)
        ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
    '(("d" "Dashboard"
      ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
      ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
      ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
      ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
              (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
              (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
              (org-agenda-todo-list-sublevels nil)
              (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
              (org-agenda-todo-list-sublevels nil)
              (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
              (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
              (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
              (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
              (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Development/org-files/tasks.org" "Inbox")
            "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
            (file+olp+datetree "~/Development/org-files/journal.org")
            "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
            ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
            :clock-in :clock-resume
            :empty-lines 1)
        ("jm" "Meeting" entry
            (file+olp+datetree "~/Development/org-files/journal.org")
            "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
            :clock-in :clock-resume
            :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Development/org-files/journal.org")
            "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))


    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (axiom/org-font-setup))
#+END_SRC


**** Nicer Heading Bullets
org-bullets replaces the heading stars in org-mode buffers with nicer looking
characters that you can control. Another option for this is org-superstar-mode
which we may cover in a later video.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+END_SRC


**** Center Org Buffers
We use visual-fill-column to center org-mode buffers for a more pleasing writing
experience as it centers the contents of the buffer horizontally to seem more
like you are editing a document. This is really a matter of personal preference
so you can remove the block below if you don't like the behavior.

#+BEGIN_SRC emacs-lisp
  (defun axiom/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . axiom/org-mode-visual-fill))
#+END_SRC


**** Structure Templates
Org Mode's structure templates feature enables you to quickly insert code blocks
into your Org files in combination with org-tempo by typing < followed by the
template name like el or py and then press TAB. For example, to insert an empty
emacs-lisp block below, you can type <el and press TAB to expand into such a
block.

You can add more src block templates below by copying one of the lines and
changing the two strings at the end, the first to be the template name and the
second to contain the name of the language as it is known by Org Babel.

#+BEGIN_SRC
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+END_SRC


*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+END_SRC


*** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC


*** Command Log Mode
command-log-mode is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame. Great for live streams and screencasts!
#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :ensure t)
#+END_SRC



*** Quality of Life
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)          ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)

(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
	              treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC


*** Titlebar
#+BEGIN_SRC emacs-lisp
  (defcustom axiom--title-show-bufname t
  "Whether to include bufname to titlebar.
Bufname is not necessary on GNOME, but may be useful in other DEs."
  :type 'boolean
  :group 'local-config)

(setq-default frame-title-format
              '(:eval (let ((match (string-match "[ *]" (buffer-name))))
                        (if (or (and match (= match 0))
                                (not axiom--title-show-bufname))
                            "Emacs"
                          "%b — Emacs"))))
#+END_SRC


*** Cursor
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(bar . 1))
#+END_SRC


*** Truncate, Don't Wrap
#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
  (define-fringe-bitmap 'right-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
  (define-fringe-bitmap 'left-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
#+END_SRC


*** Focus Line
#+BEGIN_SRC emacs-lisp
  (if (window-system)
      (global-hl-line-mode 1))
#+END_SRC


*** Dashboard
#+BEGIN_SRC emacs-lisp
      (defun no-linum ()
        (display-line-numbers-mode -1))

      (use-package dashboard
        :ensure t
        :config
        (setq dashboard-banner-logo-title "Welcome to Emacs, A hackable text editor for the 21st Century!")
        (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ; for emacs daemon
        (setq dashboard-items '((projects . 5)
                                (recents . 5)
                                (agenda . 5)))
        (dashboard-modify-heading-icons '((recents . "file-text")))
        (setq dashboard-set-navigator t)
        (setq dashboard-set-file-icons t)
        (setq dashboard-startup-banner "~/.emacs.d/img/emacs.png") ; set to path to image file to customize
        (setq dashboard-set-footer nil)
        (dashboard-setup-startup-hook)
        (setq dashboard-center-content t)
        (add-hook 'dashboard-mode-hook 'no-linum)) ; turn off line numbers for dashboard
#+END_SRC


*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC


*** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("s-b"       . treemacs)
        ("s-\"       . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

#+END_SRC


*** Evil Mode
#+BEGIN_SRC emacs-lisp

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-use-diff-faces)
    (evil-goggles-mode))

#+END_SRC emacs-lisp


** Fonts
*** =font-installed-p=
#+BEGIN_SRC emacs-lisp
  (defun axiom/font-installed-p (font-name)
    (find-font (font-spec :name font-name)))
#+END_SRC

*** Installing
#+BEGIN_SRC emacs-lisp
  (defun install-plex ()
    (when (and (window-system) ( not (string-equal system-type "windows-nt")))
      (progn
        (message "Installing IBM Plex -- You might want to grab a cup of something...")
        (call-process "/bin/bash" nil nil nil "-c" "wget 'https://github.com/IBM/plex/releases/download/v6.0.2/OpenType.zip' -O ~/.emacs.d/fonts/plex.zip")
        (call-process "/bin/bash" nil nil nil "-c" "unzip ~/.emacs.d/fonts/plex.zip -d ~/.local/share/fonts")
        (call-process "/bin/bash" nil nil nil "-c" "rm ~/.emacs.d/fonts/plex.zip")
        (message "Installed IBM Plex"))))

  (defun cache-fonts ()
    (unless
        (string-equal system-type "windows-nt")
      (progn
        (message "Running fc-cache -f")
        (call-process "/bin/bash" nil nil nil "-c" "fc-cache -f")
        (message "Fonts installed"))))

  (unless (window-system)
    (progn
      (unless (file-directory-p "~/.local/share/fonts")
        (make-directory "~/.local/share/fonts" :parents))
      (unless (member "IBM Plex Mono" (font-family-list))
        (install-plex))
      (cache-fonts)))
#+END_SRC


*** All the Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :config
    (when (and (not (axiom/font-installed-p "all-the-icons"))
               (window-system))
      (all-the-icons-install-fonts t)))
#+END_SRC


*** Defaults
#+BEGIN_SRC emacs-lisp
  (defvar axiom/default-font-size 140)
  (defvar axiom/default-variable-font-size 140)

  (set-face-attribute 'default nil :font "IBM Plex Mono" :height axiom/default-font-size)
  (set-face-attribute 'fixed-pitch nil :font "IBM Plex Mono" :height axiom/default-font-size)
  (if (member "Deja Vu Sans" (font-family-list))
    (set-face-attribute 'variable-pitch nil :font "Deja Vu Sans 10" :height axiom/default-variable-font-size :weight 'regular))
  (set-face-attribute 'font-lock-comment-face nil :foreground "#5B6268" :slant 'italic :weight 'light :font "IBM Plex Mono")
  (set-face-attribute 'mode-line nil
                        :weight 'extra-bold ;should be _very_ bold
                        :font "IBM Plex Mono"     ;same font
                        :height 1.05)       ;should be a little larger than regular text

#+END_SRC


** SQL Highlighting
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.sqli\\'" . sql-mode))
  (use-package mmm-mode
    :ensure t
    :custom
    (mmm-global-mode 'maybe)
    :config
    (set-face-background 'mmm-default-submode-face nil)
    (mmm-add-classes
      '((embedded-sql
        :submode sql-mode
        :face mmm-code-submode-face
        :front "\\(--SQL\\)"
        :back "\\(--SQL-END\\)")))
    (mmm-add-mode-ext-class 'prog-mode nil 'embedded-sql))

#+END_SRC


** Quick Reload
#+BEGIN_SRC emacs-lisp
  (defun revert-buffer-no-confirm ()
    "Revert the current buffer without asking permission"
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)
  (global-set-key (kbd "s-r") 'revert-buffer-no-confirm)
#+END_SRC


** Which Key
which-key is a useful UI panel that appears when you start pressing any key
binding in Emacs to offer you all possible completions for the prefix.
For example, if you press C-c (hold control and press the letter c), a panel
will appear at the bottom of the frame displaying all of the bindings under that
prefix and which command they run. This is very useful for learning the possible
key bindings in the mode of your current buffer.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+END_SRC


** Better Window Navigation
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s-h") 'windmove-left)
  (global-set-key (kbd "C-s-j") 'windmove-down)
  (global-set-key (kbd "C-s-k") 'windmove-up)
  (global-set-key (kbd "C-s-l") 'windmove-right)
#+END_SRC


* Project-Management

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    (projectile-indexing-method 'alien)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Development")
      (setq projectile-project-search-path '("~/Development")))
    (setq projectile-switch-project-action #'projectile-dired)
    :config
    (projectile-global-mode))

  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode))
#+END_SRC


** Line Height
#+BEGIN_SRC emacs-lisp
  (defvar axiom--line-pixel-height (line-pixel-height)
  "Line height in pixels.
Used in various places to avoid getting wrong line height when
`text-scale-mode' is active.")
#+END_SRC


* Searching and Fuzzy-Finding

** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :custom
    (ivy-use-virtual-buffers t)           ; add ‘recentf-mode' and bookmarks to ‘ivy-switch-buffer'.
    (ivy-count-format "")                 ; does not count candidates
    (ivy-initial-inputs-alist nil)        ; no regexp by default
    (ivy-re-builders-alist                ; configure regexp engine.
      '((t . ivy--regex-ignore-order)))   ; allow input not in order
    :config
    (ivy-mode 1))

(use-package ivy-rich
  :ensure t
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :ensure t
  :bind (:map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)
         ("M-x" . counsel-M-x)
         ("C-c k" . counsel-ag)
         ("C-h a" . counsel-apropos)
         ("C-x C-f" . counsel-find-file)
         ("C-x b" . ivy-switch-buffer))
  :config
  (counsel-mode 1))

  (use-package swiper
    :ensure t
    :bind*
    ("C-s" . swiper-isearch)
    ("C-r" . swiper-isearch-backward)) ; replace standard search functionality
#+END_SRC


** Helpful Help Commands
Helpful adds a lot of very helpful (get it?) information to Emacs' describe-
command buffers. For example, if you use describe-function, you will not only
get the documentation about the function, you will also see the source code of
the function and where it gets used in other places in the Emacs configuration.
It is very useful for figuring out how things work in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC


* Git/Github

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-c b") 'magit-blame)) ; Add shortcut for blame

  (use-package forge
    :ensure t
    :after magit)
#+END_SRC

#+BEGIN_SRC emacs-lisp
      (use-package diff-hl
        :ensure t
        :config
        (global-diff-hl-mode))
#+END_SRC


* Syntax Checking

** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
      :ensure t
      :custom (flycheck-check-syntax-automatically '(save mode-enabled))
      :init (global-flycheck-mode))

  (defvar-local axiom--mode-line-flycheck "")

  (defun axiom/mode-line-update-flycheck (&rest _)
    (setq axiom--mode-line-flycheck
          (if (bound-and-true-p flycheck-mode)
              (concat
               "  "
               (pcase flycheck-last-status-change
                 (`not-checked (propertize "-/-" 'help-echo "Flycheck: not checked"))
                 (`no-checker (propertize "-" 'help-echo "Flycheck: no checker"))
                 (`running (propertize "*/*" 'help-echo "Flycheck: checking"))
                 (`errored (propertize "!" 'help-echo "Flycheck: error"))
                 (`finished
                  (let-alist (flycheck-count-errors flycheck-current-errors)
                    (propertize (format "%s/%s" (or .error 0) (or .warning 0))
                                'help-echo (if (or .error .warning)
                                               (concat "Flycheck: "
                                                       (when .error (format "%d errors%s" .error (if .warning ", " "")))
                                                       (when .warning (format "%d warnings" .warning))
                                                       "\nmouse-1: list errors")
                                             "Flycheck: no errors or warnings")
                                'local-map 'flycheck-error-list-mode-line-map)))
                 (`interrupted (propertize "x" 'help-echo "Flycheck: interrupted"))
                 (`suspicious (propertize "?" 'help-echo "Flycheck: suspicious"))))
            "")))

  (add-hook 'flycheck-status-changed-functions #'axiom/mode-line-update-flycheck)
  (add-hook 'flycheck-mode-hook #'axiom/mode-line-update-flycheck)
#+END_SRC


* Auto-Completion

** Company-mode
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :after lsp
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
            ("<tab>" . company-complete-selection)
            ("C-j" . company-select-next)
            ("C-k" . company-select-previous))
            (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0)
      (company-tooltip-align-annotations t)
      (company-show-quick-access t))

    (use-package company-box
      :ensure t
      :hook (company-mode . company-box-mode))
#+END_SRC


* Tab to Complete
#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC


* Open Emacs GUI above terminal
#+BEGIN_SRC emacs-lisp
  (x-focus-frame nil)
#+END_SRC


* LSP Features

** DAP-Mode
#+BEGIN_SRC emacs-lisp
  (use-package posframe :ensure t)
  (use-package dap-mode
    :ensure t
    :hook
    (lsp-mode . dap-mode)
    (lsp-mode . dap-ui-mode))
#+END_SRC

** LSP-Mode
#+BEGIN_SRC emacs-lisp
  (defun axiom/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :ensure t
    :after evil
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . axiom/lsp-mode-setup)
          (lsp-mode . lsp-lens-mode)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (setq lsp-idle-delay 0.5
          lsp-enable-symbol-highlighting t
          lsp-enable-snippet nil  ;; Not supported by company capf, which is the recommended company backend
          lsp-pyls-plugins-flake8-enabled t)
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)

       ;; Disable these as they're duplicated by flake8
       ("pyls.plugins.pycodestyle.enabled" nil t)
       ("pyls.plugins.mccabe.enabled" nil t)
       ("pyls.plugins.pyflakes.enabled" nil t)))
    :bind (:map evil-normal-state-map
                ("gh" . lsp-describe-thing-at-point)))

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :config (setq lsp-ui-sideline-show-hover t
                  lsp-ui-sideline-delay 0.5
                  lsp-ui-doc-delay 5
                  lsp-ui-sideline-ignore-duplicates t
                  lsp-ui-doc-position 'bottom
                  lsp-ui-doc-alignment 'frame
                  lsp-ui-doc-header nil
                  lsp-ui-doc-include-signature t
                  lsp-ui-doc-use-webkit t)
    :commands lsp-ui-mode
    :bind (:map evil-normal-state-map
                ("gd" . lsp-ui-peek-find-definitions)
                ("gr" . lsp-ui-peek-find-references)))

  (use-package lsp-treemacs
    :ensure t
    :after lsp)

  (use-package lsp-ivy :ensure t)
#+END_SRC


** Tree-Sitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter :ensure t
  :hook (prog-mode . tree-sitter-mode))
  (use-package tree-sitter-langs :ensure t)
#+END_SRC


* Language Specific IDE-Like Features

** Python

*** Auto-PEP8 On Save
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t
    :config
    (setq lsp-idle-delay 0
          lsp-enable-symbol-highlighting t
          lsp-enable-snippet nil  ;; Not supported by company capf, which is the recommended company backend
          lsp-pyls-plugins-flake8-enabled t)
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)

       ;; Disable these as they're duplicated by flake8
       ("pyls.plugins.pycodestyle.enabled" nil t)
       ("pyls.plugins.mccabe.enabled" nil t)
       ("pyls.plugins.pyflakes.enabled" nil t)))
    :hook (python-mode . lsp-deferred))
#+END_SRC


*** PEP8-compliant comments
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
    (lambda ()
      (setq comment-start " # ")))
#+END_SRC


** TypeScript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+END_SRC


** Julia
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t)

  (use-package julia-mode
    :ensure t
    :interpreter ("julia" . julia-mode))

  (use-package julia-snail
    :ensure t
    :hook
        (julia-mode . julia-snail-mode))

  ;; (quelpa '(lsp-julia :fetcher github
  ;;                   :repo "gdkrmr/lsp-julia"
  ;;                   :files (:defaults "languageserver")))

  ;; (use-package lsp-julia
  ;;   :ensure t
  ;;   :hook
  ;;       (julia-mode . lsp-deferred)
  ;;   :config
  ;;       (setq lsp-julia-default-environment "~/.julia/environments/v1.7"))

#+END_SRC


** Scala
#+BEGIN_SRC emacs-lisp
    ;; Enable scala-mode for highlighting, indentation and motion commands
  (use-package scala-mode
    :ensure t
    :interpreter
      ("scala" . scala-mode))

  ;; Enable sbt mode for executing sbt commands
  (use-package sbt-mode
    :ensure t
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
     ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
     (setq sbt:program-options '("-Dsbt.supershell=false")))

  (use-package lsp-metals
    :ensure t
    :hook (scala-mode . lsp-deferred))
#+END_SRC
