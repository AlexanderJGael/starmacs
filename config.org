#+TITLE: Emacs Config
#+AUTHOR: Matthew Cooper Healy

* Package Management
** Package Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 0)))

  (add-to-list 'load-path "~/.emacs.d/modules") ; add local files
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
      (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (setq auto-package-update-interval 30)
    (auto-package-update-maybe))
#+END_SRC

* Quality of Life Improvements
** Keep Buffers Up to Date with Files
When files on disk change, open buffers should be automatically updated to reflect those changes.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Do Not Create Extra Files
Don't create =backup~= or =#autosave#= files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

** Replace Selection
When text is highlighted, typing should delete the highlighted text and insert what is typed.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** Usage Guides
=discover.el= mostly just helps with =dired= mode, but it's worth including for new users.
#+BEGIN_SRC emacs-lisp
  (use-package discover
    :ensure t
    :config
    (global-discover-mode 1))
#+END_SRC

** Mouse in Terminal
#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode 1)
#+END_SRC

** Whitespace
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; whitespace-space-regexp will only work with selective highlighting, not with space-mark
                                          ;(setq whitespace-space-regexp "\\( \\{2,\\}\\)")
  (setq whitespace-style (quote (face tabs newline tab-mark newline-mark)))
  (custom-set-faces
   '(whitespace-tab((t (:foreground "#E06C75")))) ; make tabs _very_ noticable
   '(whitespace-space((t (:foreground "#525252"))))
   '(whitespace-newline((t (:foreground "#525252")))))
  (setq whitespace-display-mappings
        '((space-mark 32 [183] [46])
          (newline-mark 10 [172 10])
          (tab-mark 9 [187 9] [92 9])))
  (global-whitespace-mode 1)

  (setq-default indent-tabs-mode nil) ; never indent with tabs
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
  (if (version<= "26.0.50" emacs-version)
      (global-display-line-numbers-mode)
    (progn
      (global-linum-mode t)
      (setq linum-format "%4d \u2502 ")))
#+END_SRC

** Column Ruler
I like to display a column ruler at common styleguide limits
(famously, 80 characters, but also often 100 and 120 characters).
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+END_SRC

** Look
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (if (window-system)
        (load-theme 'doom-one t))) ; Only load in GUI to reduce issues with comment-coloring
#+END_SRC

*** Org-Mode
#+BEGIN_SRC emacs-lisp
  (require 'color)

  (use-package org
    :ensure t
    :commands (org-capture org-agenda)
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'no-linum))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

*** Remove Default Trash
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
#+END_SRC

*** Cursor
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(bar . 1))
#+END_SRC

*** Truncate, Don't Wrap
#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
  (define-fringe-bitmap 'right-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
  (define-fringe-bitmap 'left-arrow
    [#b00000000
     #b00011000
     #b00111100
     #b01111110
     #b01111110
     #b00111100
     #b00011000
     #b00000000])
#+END_SRC

*** Focus Line
#+BEGIN_SRC emacs-lisp
  (if (window-system)
      (global-hl-line-mode 1))
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp
  (defun no-linum ()
    (display-line-numbers-mode -1))

  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-banner-logo-title "Welcome to the Isomorph Research Laboratories AXIOM Editing environment.")
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ; for emacs daemon
    (setq dashboard-items '((projects . 5)
                            (recents . 5)
                            (agenda . 5)))
    (setq dashboard-set-heading-icons t)
    (dashboard-modify-heading-icons '((recents . "file-text")))
    (setq dashboard-set-navigator t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/img/axiom.png") ; set to path to image file to customize
    (setq dashboard-set-footer nil)
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t)
    (add-hook 'dashboard-mode-hook 'no-linum)) ; turn off line numbers for dashboard
    ;(add-hook 'dashboard-mode-hook 'olivetti-mode)
    ;(add-hook 'prog-mode-hook (lambda () (if (one-window-p) (olivetti-mode)))))
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC

** Fonts
*** Installing
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
  :if (display-graphic-p))

  (defun install-iosevka ()
    (when (and (window-system) ( not (string-equal system-type "windows-nt")))
      (progn
        (message "Installing Iosevka -- You might want to grab a cup of something...")
        (call-process "/bin/bash" nil nil nil "-c" "wget 'https://github.com/be5invis/Iosevka/releases/download/v5.1.1/ttf-iosevka-5.1.1.zip' -O ~/.emacs.d/fonts/iosevka.zip")
        (call-process "/bin/bash" nil nil nil "-c" "unzip ~/.emacs.d/fonts/iosevka.zip -d ~/.local/share/fonts")
        (call-process "/bin/bash" nil nil nil "-c" "rm ~/.emacs.d/fonts/iosekva.zip")
        (message "Installed Iosevka"))))

  (defun cache-fonts ()
    (unless
        (string-equal system-type "windows-nt")
      (progn
        (message "Running fc-cache -f")
        (call-process "/bin/bash" nil nil nil "-c" "fc-cache -f")
        (message "Fonts installed"))))

  (unless (window-system)
    (progn
      (unless (file-directory-p "~/.local/share/fonts")
        (make-directory "~/.local/share/fonts" :parents))
      (unless (member "Iosevka" (font-family-list))
        (install-iosevka))
      (cache-fonts)))
#+END_SRC

*** Defaults
#+BEGIN_SRC emacs-lisp
  (defun set-fonts ()
    (interactive)
    (set-face-attribute 'mode-line nil
                        :weight 'extra-bold ;should be _very_ bold
                        :font "Iosevka"     ;same font
                        :height 1.05)       ;should be a little larger than regular text
    (custom-set-faces
      '(font-lock-comment-face ((t (:foreground "#5B6268" :weight light :slant italic :family "Iosevka"))))))
    (set-face-attribute 'default nil :font "Iosevka" :height 140)

  (set-fonts)
#+END_SRC

*** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :ensure t) ; recommend installing icons manually, this rarely works
#+END_SRC

*** Ligatures
#+BEGIN_SRC emacs-lisp
  (use-package ligature
    :load-path "~/.emacs.d/mickeynp-ligature"
    :config
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Iosevka ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("<--" "<---" "<<-" "<-" "->" "->>" "-->" "--->"
                                         "<->" "<-->" "<--->" "<---->" "<!--" "<!---"
                                         "<==" "<===" "<=" "=>" "==>" "===>" ">="
                                         "<=>" "<==>" "<===>" "<====>"
                                         "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!="
                                         "===" "!==" ":=" ":-" ":+" "<*" "<*>" "*>"
                                         "<|" "<|>" "|>" "+:" "-:" "=:" "<***>" "++" "+++"))

    (global-ligature-mode t)
    )

#+END_SRC

** SQL Highlighting
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.sqli\\'" . sql-mode))
  (use-package mmm-mode
    :ensure t
    :custom
    (mmm-global-mode 'maybe)
    :config
    (set-face-background 'mmm-default-submode-face nil)
    (mmm-add-classes
      '((embedded-sql
        :submode sql-mode
        :face mmm-code-submode-face
        :front "\\(--SQL\\)"
        :back "\\(--SQL-END\\)")))
    (mmm-add-mode-ext-class 'prog-mode nil 'embedded-sql))

#+END_SRC

** Quick Reload
#+BEGIN_SRC emacs-lisp
  (defun revert-buffer-no-confirm ()
    "Revert the current buffer without asking permission"
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)
#+END_SRC

** Zen Mode (Olivetti)
Olivetti Mode is creating a recursive load, so it is disabled until that is fixed.

#+BEGIN_SRC emacs-lisp
  ;; (use-package olivetti
  ;;   :ensure t
  ;;   :config
  ;;   (setq-default olivetti-body-width 120)
  ;;   (add-hook 'org-mode-hook 'olivetti-mode)

  ;;   (global-set-key (kbd "<f12>") 'olivetti-mode)
  ;;   (global-set-key (kbd "C-M-z") 'olivetti-mode))
#+END_SRC

* Project-Management
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :custom
    (projectile-indexing-method 'alien)
    (projectile-enable-caching t)
    (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode))
#+END_SRC

* Searching and Fuzzy-Finding
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :bind
    (:map ivy-mode-map
      ("C-'" . ivy-avy))
    :custom
    (ivy-use-virtual-buffers t)           ; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer'.
    (ivy-height 10)                       ; number of result lines to display
    (ivy-count-format "")                 ; does not count candidates
    (ivy-initial-inputs-alist nil)        ; no regexp by default
    (ivy-re-builders-alist                ; configure regexp engine.
      '((t . ivy--regex-ignore-order)))   ; allow input not in order
    :init
    (ivy-mode 1))

  (use-package counsel
    :ensure t
    :bind*
    ("M-x" . counsel-M-x)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-c k" . counsel-ag)
    ("C-h a" . counsel-apropos)
    ("C-x C-f" . counsel-find-file)
    ("C-x b" . ivy-switch-buffer))

  (use-package swiper
    :ensure t
    :bind*
    ("C-s" . swiper-isearch)
    ("C-r" . swiper-isearch-backward)) ; replace standard search functionality
#+END_SRC

* Git/Github
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-c b") 'magit-blame)) ; Add shortcut for blame

  (use-package magithub
    :after magit
    :ensure t
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/octokitty/")
    (setq auth-sources '("~/.authinfo")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
      (use-package diff-hl
        :ensure t
        :config
        (global-diff-hl-mode))
#+END_SRC

** Blamer
Add [[https://gitlens.amod.io/][GitLens]]-style line annotations after a given pause.
While Magit already has a way to annotate the last commit touching a line,
this is more passive, and allows for more accidental discoveries.
#+BEGIN_SRC emacs-lisp
  (use-package blamer
    :ensure t
    :bind (("s-i" . blamer-show-commit-info))
    :defer 20
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
    (blamer-prettify-time-p t)

    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                     :background nil
                     :height 140
                     :italic t)))
    :config
    (global-blamer-mode 1))
#+END_SRC


* Tab to Complete
#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

* Open Emacs GUI above terminal
#+BEGIN_SRC emacs-lisp
  (x-focus-frame nil)
#+END_SRC
* LSP Features
** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :ensure t
    :config
    (add-hook 'python-mode-hook 'eglot-ensure)
    (add-hook 'haskell-mode-hook 'eglot-ensure)
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure))
#+END_SRC

* Language Specific IDE-Like Features
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (add-hook 'haskell-mode 'fira-code-mode))
#+END_SRC

** Python
*** Auto-PEP8 On Save
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t
    :config
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

*** PEP8-compliant comments
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
    (lambda ()
      (setq comment-start " # ")))
#+END_SRC
